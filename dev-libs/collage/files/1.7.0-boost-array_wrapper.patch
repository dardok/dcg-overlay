diff -u -r -N a/co/dataIStreamArchive.h b/co/dataIStreamArchive.h
--- a/co/dataIStreamArchive.h	2017-09-14 12:33:51.536052729 -0400
+++ b/co/dataIStreamArchive.h	2017-09-14 12:35:14.180710643 -0400
@@ -73,7 +73,7 @@
 
     /** @internal use optimized load for arrays. */
     template <typename T>
-    void load_array(boost::serialization::array<T>& a, unsigned int);
+    void load_array(boost::serialization::array_wrapper<T>& a, unsigned int);
 
     /** @internal enable serialization optimization for arrays. */
     struct use_array_optimization
diff -u -r -N a/co/dataIStreamArchive.ipp b/co/dataIStreamArchive.ipp
--- a/co/dataIStreamArchive.ipp	2017-09-14 12:33:51.536052729 -0400
+++ b/co/dataIStreamArchive.ipp	2017-09-14 12:35:27.628817697 -0400
@@ -21,7 +21,7 @@
 namespace co
 {
 template <typename T>
-void DataIStreamArchive::load_array(boost::serialization::array<T>& a,
+void DataIStreamArchive::load_array(boost::serialization::array_wrapper<T>& a,
                                     unsigned int)
 {
     _stream >> Array<T>(a.address(), a.count());
diff -u -r -N a/co/dataOStreamArchive.h b/co/dataOStreamArchive.h
--- a/co/dataOStreamArchive.h	2017-09-14 12:33:51.536052729 -0400
+++ b/co/dataOStreamArchive.h	2017-09-14 12:35:42.163933406 -0400
@@ -66,7 +66,7 @@
 
     /** @internal use optimized save for arrays. */
     template <typename T>
-    void save_array(const boost::serialization::array<T>& a, unsigned int);
+    void save_array(const boost::serialization::array_wrapper<T>& a, unsigned int);
 
     /** @internal enable serialization optimization for arrays. */
     struct use_array_optimization
diff -u -r -N a/co/dataOStreamArchive.ipp b/co/dataOStreamArchive.ipp
--- a/co/dataOStreamArchive.ipp	2017-09-14 12:33:51.536052729 -0400
+++ b/co/dataOStreamArchive.ipp	2017-09-14 12:35:54.213029324 -0400
@@ -16,7 +16,7 @@
  */
 
 template <typename T>
-void DataOStreamArchive::save_array(const boost::serialization::array<T>& a,
+void DataOStreamArchive::save_array(const boost::serialization::array_wrapper<T>& a,
                                     unsigned int)
 {
     _stream << Array<const T>(a.address(), a.count());
